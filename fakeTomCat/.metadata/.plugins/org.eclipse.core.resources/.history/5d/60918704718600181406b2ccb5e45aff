package myTomCat;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.Socket;

import org.apache.commons.io.FileUtils;

class HandlerRequestThread implements Runnable {
	private InputStream input = null;
	private PrintStream out = null;
	public static final String WEB_ROOT = "D:" + File.separator + "FakeTomCat" + File.separator;
	
	public HandlerRequestThread(Socket socket) {
		try {
			input = socket.getInputStream();
			out = new PrintStream(socket.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void run() {
		System.out.println("Processing user's request...");
		try {
			String fileName = parseRequestHead(this.input);
			getFile(fileName);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public String parseRequestHead(InputStream in) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		String headContent = br.readLine();
		System.out.println(headContent);
		String[] heads = headContent.split(" ");
		return heads[1].endsWith("/") ? "index.html" : heads[1];
	}
	
	public void getFile(String fileName) throws IOException {
        //getFile
		File file = new File(WEB_ROOT + fileName);
		if (!file.exists()) {
			sendError("404", "The source you request [" + fileName + "] does not exist!");
		} else {
			//reWrite
			File templateFile = new File(WEB_ROOT + fileName);
			String content = FileUtils.readFileToString(templateFile, "utf-8");   
			content = ReplaceData.replaceHtmlTag(content);
			OutputStream fos = new FileOutputStream(WEB_ROOT + fileName);
			fos.write(content.getBytes("UTF-8"));
			fos.flush();
			fos.close();
			BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));
			byte[] buff = new byte[(int) file.length()];
			bis.read(buff);
			out.println("HTTP/1.1 200 OK");
			out.println();
			out.write(buff);
			out.flush();
			out.close();
			bis.close();
		}
	}
	
	public void sendError(String errorNum, String errorMsg) {
		System.out.println("Error: 404");
		StringBuilder sb = new StringBuilder();
		sb.append("<html><head><title>Error</title>");
		sb.append("<meta http-equiv='Content-Type' content='text/html'; charset=gbk'>");
		sb.append("</head><body>");
		sb.append(errorNum + ":" + errorMsg);
		sb.append("</body></html>");
		out.println("HTTP/1.1 404 Not Found");
		out.println();
		out.print(sb.toString());
		out.flush();
		out.close();
	}
}
